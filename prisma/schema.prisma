// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType    = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?  @unique
  password        String?  
  username        String?  @unique 
  emailVerified   DateTime?
  image           String?
  imagePublicId   String?
  accounts        Account[]
  sessions        Session[]
  bio             String   @default("Update your bio...")
  gender          String?  
  isPrivate       Boolean  @default(false)  
  followersCount  Int      @default(0) 
  followingCount  Int      @default(0) 
  postsCount      Int      @default(0) 
  followers       Follower[]  @relation("UserFollowers") // Users who follow this user
  following       Follower[]  @relation("UserFollowing") // Users this user follows
  posts           Post[]  
  likes           Like[]   // likes by the user
  comments        Comment[]  // Comments made by the user
  saved           SavedPost[] 
  tagged          TaggedPost[]
  conversations   Conversation[] @relation("ConversationOwner")
  participants    Participant[]
  messages        Message[]      @relation("MessageSender")
  messagePost     MessagePost[]
  reactions       Reaction[]
  notifications   Notification[]
  strories        Stories[]
  storiesLikes    StoryLike[]
  storiesComments StoryComment[]
  storiesSeenBy   StoriesSeenBy[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([userId, credentialID])
// }

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id]) // The user who is following
  followerId  String   @db.ObjectId
  following   User     @relation("UserFollowers", fields: [followingId], references: [id]) // The user being followed
  followingId String   @db.ObjectId
  isAccepted  Boolean  @default(false)
  createdAt   DateTime @default(now()) // Timestamp for when the relationship was created

  @@unique([followerId, followingId])
  @@index([followerId]) // Optimize queries by follower
  @@index([followingId]) // Optimize queries by following
}

model Post{
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @db.ObjectId  
  images           Image[]  
  caption          String?
  isLikesCountHide Boolean  @default(false)
  isCommentsOff    Boolean  @default(false)
  likesCount       Int      @default(0)
  likes            Like[]
  commentsCount    Int      @default(0)
  comments         Comment[]
  savedBy          SavedPost[] 
  taggedUsers      TaggedPost[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

type Image {
  url        String
  public_id  String
}


model Like {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User who liked the post
  userId   String   @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Liked post
  postId   String   @db.ObjectId
  createdAt DateTime @default(now()) // Timestamp of the like action

  @@unique([userId, postId]) // Ensure a user can like a post only once
  @@index([postId])          // Optimize queries for likes on a specific post
}


model Comment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  text      String     // The comment text
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade) // User who made the comment
  userId    String     @db.ObjectId
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade) // Post on which the comment was made
  postId    String     @db.ObjectId
  parent    Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?    @db.ObjectId
  replies   Comment[]  @relation("CommentReplies") // Replies to this comment
  
  createdAt DateTime   @default(now()) // Timestamp of comment creation
  updatedAt DateTime   @updatedAt     // Timestamp of comment update

  @@index([postId])   // Optimize queries for comments on a specific post
  @@index([parentId]) // Optimize queries for nested replies
}


model SavedPost {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User who saved the post
  userId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Post being saved
  postId     String   @db.ObjectId
  createdAt  DateTime @default(now()) 
}


model TaggedPost {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User who is tagged
  userId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // Post in which the user is tagged
  postId     String   @db.ObjectId
  createdAt  DateTime @default(now()) // Timestamp for tagging
}


model Conversation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?     // Name for group chats, null for private chats
  isGroup       Boolean     @default(false) // True if it's a group chat
  groupImage    String?     // Group image for group chats
  owner         User        @relation(name:"ConversationOwner", fields: [ownerId], references: [id])
  ownerId       String      @db.ObjectId
  participants  Participant[]    // Stores user IDs for all participants
  messages      Message[]
  lastMessage   String?     
  lastMessageAt DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Participant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId   @unique

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  sender         User         @relation(name: "MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String       @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  text           String?       
  post           MessagePost? 
  reactions      Reaction[]   
  seenBy         String[]     // Stores user IDs who have seen the message
  createdAt      DateTime     @default(now())

  // ðŸ”¥ Self-referencing relation for replies
  parentMessage  Message?    @relation(name: "MessageReplies", fields: [parentMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentMessageId String?    @db.ObjectId
  replies        Message[]   @relation(name: "MessageReplies")

  @@index([conversationId])   // Optimizes queries
  @@index([parentMessageId]) // Optimize queries for nested replies
}


model Reaction {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId         String?    @db.ObjectId
  message        Message    @relation(fields: [messageId], references: [id], onDelete: Cascade) 
  messageId      String     @db.ObjectId @unique
  reaction       String
  createdAt      DateTime   @default(now())
}

model MessagePost {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  postUser       User?      @relation(fields: [postUserId], references: [id], onDelete: Cascade) 
  postUserId     String?    @db.ObjectId
  message        Message    @relation(fields: [messageId], references: [id], onDelete: Cascade) 
  messageId      String     @db.ObjectId @unique
  postId         String?    
  image          String?
  imagePublicId  String?
  createdAt      DateTime   @default(now())
}

model Notification {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation( fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.ObjectId
  recipientId    String       @db.ObjectId
  postImage      String?
  postId         String?
  text           String       
  isSeen         Boolean  
  type           String    
  expiresAt      DateTime     @map("expireAt") 
  createdAt      DateTime     @default(now())
}

model Stories{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @db.ObjectId  
  image           Image?    
  text            String?   
  likes           StoryLike[]
  comments        StoryComment[]
  seenBy          StoriesSeenBy[]
  expiresAt       DateTime 
  createdAt       DateTime @default(now())
}

model StoriesSeenBy{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @db.ObjectId
  story            Stories     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId          String   @db.ObjectId  
  createdAt       DateTime @default(now())
}

model StoryLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User who liked the post
  userId    String   @db.ObjectId
  story     Stories  @relation(fields: [storyId], references: [id], onDelete: Cascade) // Liked post
  storyId   String   @db.ObjectId
  createdAt DateTime @default(now()) // Timestamp of the like action

  @@unique([userId, storyId]) // Ensure a user can like a post only once
  @@index([storyId])          // Optimize queries for likes on a specific post
}


model StoryComment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  text      String     // The comment text
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade) // User who made the comment
  userId    String     @db.ObjectId
  story     Stories    @relation(fields: [storyId], references: [id], onDelete: Cascade) // Liked post
  storyId   String     @db.ObjectId
  createdAt DateTime   @default(now()) // Timestamp of comment creation

  @@index([storyId])   // Optimize queries for comments on a specific post
}

model PasswordReset {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     
  pin       String 
  expiresAt DateTime    
  createdAt DateTime   @default(now()) 
}

model EmailVerification {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     
  pin       String     
  expiresAt DateTime
  createdAt DateTime   @default(now()) 
}